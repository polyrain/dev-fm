import { SpotifyApi } from '@spotify/web-api-ts-sdk';
import { provide, ref, reactive } from 'vue';
import { differenceInCalendarDays } from 'date-fns';


let api = undefined;
const params = new URLSearchParams(window.location.search);

let userProfile = undefined;


// Genres languages can pick from based on their category
const genreGroups = {
    'low-level': ['heavy-metal', 'punk-rock', 'anime', 'industrial'],
    'enterprise': ['classical', 'ambient', 'acoustic', 'disney'],
    'high-level': ['electronic', 'deep-house', 'progressive-house', 'synth-pop', 'techno'],
    'functional': ['alternative', 'anime', 'chicago-house', 'deep-house', 'garage', 'jazz'],
    'esolang': ['k-pop', 'j-pop', 'minimal-techno', 'new-age', 'post-dubstep'],
    'gamedev': ['ambient', 'classical', 'electronic', 'soundtracks', 'jazz'],
}

// Genres that get sprinkled in based on how close to deadline we are
const deadlineGroups = {
    'far': ['happy', 'indie-pop', 'chill', 'classical', 'rainy-day', 'jazz'],
    'near': ['pop', 'pop-dubstep', 'work-out', 'trip-hop', 'rock-n-roll', 'study', 'jazz'],
    'immediate': ['hardstyle', 'hardcore', 'hard-rock', 'drum-and-bass', 'party']
}

// Map the groups to languages
const langTags = {
    'Rust': 'low-level',
    'C': 'low-level',
    'C++': 'low-level',
    'B': 'low-level',
    'D': 'low-level',
    'Go': 'low-level',
    'Assembly': 'low-level',
    'Zig': 'low-level',
    'Java': 'enterprise',
    'C#': 'enterprise',
    'Kotlin': 'enterprise',
    'Swift': 'enterprise',
    'Dart': 'enterprise',
    'Python': 'high-level',
    'Lua': 'high-level',
    'Ruby': 'high-level',
    'JS': 'high-level',
    'TS': 'high-level',
    'PHP': 'high-level',
    'Haskell': 'functional',
    'Scala': 'functional',
    'F#': 'functional',
    'Elm': 'functional',
    'Erlang': 'functional',
    'Brainfuck': 'esolang',
    'HAXE': 'gamedev',
    'Perl': 'enterprise',
    'R': 'functional',
    'MATLAB': 'functional',
    'Julia': 'high-level',
    'OCamal': 'functional',
    'APL': 'functional',
    'Ada': 'low-level',
    'Prolog': 'low-level',
    'COBOL': 'low-level',
    'Forth': 'low-level',
    'GDScript': 'gamedev',
    'GLSL': 'gamedev',
    'GML': 'gamedev',
}

const languages = [
    'Rust', 'C', 'JS',
    'TS', 'Ada', 'B',
    'D', 'Python', 'Haskell',
    'Scala', 'Java'];

let authenticated = undefined;

export function initSpotify() {
    // Provider to give access to our API calls
    provide('LANGUAGES', langTags);
    // Get logged in user
    api = SpotifyApi.withUserAuthorization(
        import.meta.env.VITE_SPOTIFY_CLIENT_ID,
        "http://localhost:5173/callback",
        ['playlist-modify-public']
    );
    api.authenticate().then((auth) => {
        authenticated = auth;
        console.log(authenticated);
        console.log(api.currentUser);
        api.currentUser.profile().then((profile) => userProfile = profile);
        console.log("User set")
    });
    console.log(api);
    // TODO: Put all the api funcs here in a ctx
}

// Our knobs:
// Tempo (Min, Max, Target)
// Popularity (Min, Max, Target) Indie switch?
//Danceability (Min, Max, Target) How much of a dance song it is
// Energy "" "" How energetic it is (Death Metal == HIGH energy)
// Acousticness/Speechiness, controls how much talking in song
// Valence, emotions. Closer to 1 == Happy, closer to 0, angry/sad

// Turn languages in Energy, Valnce, Acousticness, Danceability
// and Popularity

// Turn Due Date into the Tempo and maybe also the Energy
// Might need to run Due Date call multiple times if window is
// Too big (ie a playlist can prepare a days worth of songs)
function generateSeeds(genres) {
    let shuffled = Array.from(genres).sort(() => 0.5 - Math.random());
    return shuffled.slice(0, 5);
}

function generateChunk(seeds, playlist) {
    console.log("Hello");
    api.recommendations.get({
        seed_genres: seeds,
        limit: 10,
        market: 'AU'
    }).then((items) => {
        const songUris = items.tracks.reduce(
            (uris, currSong) => {
                uris.push(currSong.uri);
                return uris;
            }, []
        );

        // We've got ourselves 10 songs now; add them to the list
        api.playlists.addItemsToPlaylist(playlist.id, songUris);
        console.log(items)
    })
}

async function generatePlaylist(startDate, langs) {
    let diff = differenceInCalendarDays(startDate, new Date())
    let playlist = undefined;
    if (diff >= 0) {
        playlist = await api.playlists.createPlaylist(userProfile.id, {
            name: 'Dev-FM-' + Math.random().toString(36).slice(2),
            public: true,
            description: 'Generated by Dev-FM!'
        });
        console.log(playlist)
    } else {
        return; // Exit early
    }
    const langGenres = langs.reduce(
        (genreList, currLang) => {
            let tag = langTags[currLang];
            genreGroups[tag].forEach(item => genreList.add(item))
            return genreList;
        }, new Set()
    );
    console.log(langGenres);
    console.log(generateSeeds(langGenres));
    // We now have how many chunks of days to gen
    // Threshold the deadline by # of days left
    for (let i = diff; i >= 0; i--) {
        if (i > 5) {
            // Chill, we have time
            deadlineGroups['far'].forEach(item => langGenres.add(item));
        } else if (i > 2) {
            // Times ramping up but we have a little bit
            deadlineGroups['near'].forEach(item => langGenres.add(item));
        } else {
            // It's do or die
            deadlineGroups['immediate'].forEach(item => langGenres.add(item));
        }
        generateChunk(generateSeeds(langGenres), playlist)
    }
}

export function testSpotify2() {
    api.search('The Beatles', ["artist"]).then(
        (items) => {
            console.table(items.artists.items.map((item) => ({
                name: item.name,
                followers: item.followers.total,
                popularity: item.popularity,
            })));
        }
    );

}



export function makeSpotifyCall(opts) {
    console.log(opts)
    // Do all handling here
    //testSpotify2();
    generatePlaylist(opts.date, opts.langs)
}


/*
All genres:
{
  "genres": [
    "acoustic",
    "afrobeat",
    "alt-rock",
    "alternative",
    "ambient",
    "anime",
    "black-metal",
    "bluegrass",
    "blues",
    "bossanova",
    "brazil",
    "breakbeat",
    "british",
    "cantopop",
    "chicago-house",
    "children",
    "chill",
    "classical",
    "club",
    "comedy",
    "country",
    "dance",
    "dancehall",
    "death-metal",
    "deep-house",
    "detroit-techno",
    "disco",
    "disney",
    "drum-and-bass",
    "dub",
    "dubstep",
    "edm",
    "electro",
    "electronic",
    "emo",
    "folk",
    "forro",
    "french",
    "funk",
    "garage",
    "german",
    "gospel",
    "goth",
    "grindcore",
    "groove",
    "grunge",
    "guitar",
    "happy",
    "hard-rock",
    "hardcore",
    "hardstyle",
    "heavy-metal",
    "hip-hop",
    "holidays",
    "honky-tonk",
    "house",
    "idm",
    "indian",
    "indie",
    "indie-pop",
    "industrial",
    "iranian",
    "j-dance",
    "j-idol",
    "j-pop",
    "j-rock",
    "jazz",
    "k-pop",
    "kids",
    "latin",
    "latino",
    "malay",
    "mandopop",
    "metal",
    "metal-misc",
    "metalcore",
    "minimal-techno",
    "movies",
    "mpb",
    "new-age",
    "new-release",
    "opera",
    "pagode",
    "party",
    "philippines-opm",
    "piano",
    "pop",
    "pop-film",
    "post-dubstep",
    "power-pop",
    "progressive-house",
    "psych-rock",
    "punk",
    "punk-rock",
    "r-n-b",
    "rainy-day",
    "reggae",
    "reggaeton",
    "road-trip",
    "rock",
    "rock-n-roll",
    "rockabilly",
    "romance",
    "sad",
    "salsa",
    "samba",
    "sertanejo",
    "show-tunes",
    "singer-songwriter",
    "ska",
    "sleep",
    "songwriter",
    "soul",
    "soundtracks",
    "spanish",
    "study",
    "summer",
    "swedish",
    "synth-pop",
    "tango",
    "techno",
    "trance",
    "trip-hop",
    "turkish",
    "work-out",
    "world-music"
  ]
}

*/